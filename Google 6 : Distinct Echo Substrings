Question Link : https://leetcode.com/problems/distinct-echo-substrings/description/

Solution 1 : 

class Solution {
// https://www.youtube.com/watch?v=UsrW60_lbRs&ab_channel=Pepcoding
public:
    int distinctEchoSubstrings(string text) {
        unordered_set<string> st;
        
        int n = text.size();
        for(int len = 1;len<=n/2;len++){
            int count = 0;
            for(int l=0,r=len;r<n;l++,r++){
                if(text[l] == text[r]) count++;
                else count = 0;

                if(count == len){
                    st.insert(text.substr(l,r-l+1));
                    count--; // first character removed
                }
            }
        }

        return st.size();
    }
};


Solution 2 : 

class Solution {
// https://www.youtube.com/watch?v=UsrW60_lbRs&ab_channel=Pepcoding
public:
    void computeHash(vector<long long>&hash,vector<long long>&power,string &s){
        long long radix = 256 , mod = 1e9 + 7;
        hash[0] = s[0] - 'a';
        power[0] = 1;

        for(int i=1;i<s.size();i++){
            hash[i] = (hash[i-1] * radix + s[i])%mod;
            power[i] = (power[i-1] * radix) % mod;
        }
    }

    int distinctEchoSubstrings(string text) {
        unordered_set<long long> st;
        int n = text.size(),mod = 1e9 + 7;
        
        vector<long long> hash(n,0);
        vector<long long> power(n,0);
        computeHash(hash,power,text);


        for(int len = 1;len<=n/2;len++){
            int count = 0;
            for(int l=0,r=len;r<n;l++,r++){
                if(text[l] == text[r]) count++;
                else count = 0;

                if(count == len){
                    // st.insert(text.substr(l,r-l+1));
                int hashedValue = (hash[r] - (hash[l] * power[r-l])%mod + mod)%mod;
                    st.insert(hashedValue);
                    count--; // first character removed
                }
            }
        }

        return st.size();
    }
};
