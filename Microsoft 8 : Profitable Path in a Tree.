Question Link : https://leetcode.com/problems/most-profitable-path-in-a-tree/description/

Solution : 

class Solution {
private:
    void dfsForDistanceAndParent(int node,int dis,vector<int> adj[],vector<int>&parent,
    vector<int>&dist){
        dist[node] = dis;

        for(int i : adj[node]){
            if(dist[i] != -1) continue;
            parent[i] = node;
            dfsForDistanceAndParent(i,dis+1,adj,parent,dist);
        }
    }
    
    int ans = 0,maxAns=INT_MIN;
    void dfs(int curr,vector<int>adj[],vector<bool>&vis,vector<int>&amount){
        vis[curr] = true;
        ans += amount[curr];
        int trav = 0;
        for(int i : adj[curr]){
            if(!vis[i]){
                trav++;
                dfs(i,adj,vis,amount);
            }
        }
        if(trav==0){
            //this means this is leaf node that's why trav did not change
            maxAns = max(ans, maxAns);
        }
        
        ans -= amount[curr];
    }

public:
    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        int n = amount.size();
        vector<int> adj[n];

        for(vector<int> v : edges){
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        
        //finding parent and distance of each node from root
        vector<int> parent(n,-1),dist(n,-1);
        dfsForDistanceAndParent(0,0,adj,parent,dist);
        
        // marking amount 0 where bob reaches first before alice
        int curr = bob;
        int currDist = 0;
        while(curr!=-1){
            if(dist[curr]>currDist){
                amount[curr] = 0;
            }else if(dist[curr] == currDist){
                amount[curr]/=2;
            }
            curr = parent[curr];
            currDist++;
        }
        
        //Now we have to find path from root to leaf with maximum sum of amount and return it
        vector<bool> vis(n,false);
        dfs(0,adj,vis,amount);
        return maxAns;
    }
};
