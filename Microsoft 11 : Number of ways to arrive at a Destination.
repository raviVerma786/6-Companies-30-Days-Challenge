Question Link: https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/description/

Solution : 

class Solution {
public:
//dijkstra's algorithm is used
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>> adj[n];
        for(vector<int> &v : roads){
            adj[v[0]].push_back({v[1],v[2]});
            adj[v[1]].push_back({v[0],v[2]});
        }
        
        int mod = 1e9 + 7;
        vector<long long> ways(n,0); // ways[i] => no of ways to reach at node i with shortest time
        vector<long long> dist(n,1e18); // dist[i] => minimum time taken to reach at node i
        dist[0] = 0;
        ways[0] = 1;
        priority_queue<pair<long long,int>,vector<pair<long long,int>>,greater<pair<long long,int>>> pq;//store {node,shortest distance}

        pq.push({0,0});
        while(!pq.empty()){
            long long d = pq.top().first;
            int  node = pq.top().second;
            pq.pop();

            for(pair<int,long long> p : adj[node]){
                int u = p.first;
                int udist=p.second;
                if(dist[u] > d + udist){
                    //means first time of arriving
                    dist[u] = d + udist;
                    ways[u] = ways[node];
                    pq.push({dist[u],u});
                }
                else if(dist[u] == d + udist){
                    ways[u] = (ways[u] + ways[node])%mod;
                }
            }
        }
        
        return (int)(ways[n-1]%mod);
    }
};
