Question Link : https://leetcode.com/problems/largest-divisible-subset/description/

Solution : 

class Solution {
public:
// This question is Variant of longest increasing subsequece
    void lis(vector<int>& nums,vector<int>&dp,int &maxLen){
        for(int i=1;i<nums.size();i++){
            for(int j=i-1;j>=0;j--){
                if(nums[i]%nums[j] == 0 && dp[j] + 1 > dp[i]){
                    dp[i] = dp[j] + 1;
                }

                maxLen = max(maxLen,dp[i]);
            }
        }
    }

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());

        //finding max length of subset
        vector<int> dp(n,1);
        int maxLen = 1;
        lis(nums,dp,maxLen);

        //finding subset
        vector<int> ans;
        int prev = -1;
        for(int i=n-1;i>=0;i--){
            if(dp[i] == maxLen && (prev==-1 || prev % nums[i] == 0)){
                ans.push_back(nums[i]);
                prev = nums[i];
                maxLen--;
            }
        }

        reverse(ans.begin(),ans.end());
        return ans;
    }
};
