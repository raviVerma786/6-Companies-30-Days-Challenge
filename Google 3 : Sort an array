Question Link : https://leetcode.com/problems/sort-an-array/submissions/883733611/

Solution 1:

//basically it is asking to quick sort
class Solution {
private:
    void heapify(vector<int>&nums,int n,int i){
        int largest = i;
        int left = 2*i + 1,right = 2*i + 2;

        if(left < n && nums[left] > nums[largest]) largest = left;
        if(right < n && nums[right] > nums[largest]) largest = right;

        if(largest != i){
            swap(nums[largest],nums[i]);
            heapify(nums,n,largest);
        }
    }

    void heapSort(vector<int>&nums){
        int n = nums.size();

        //Build heap
        for(int i=n/2 - 1;i>=0;i--){
            heapify(nums,n,i);
        }

        //storing max each time
        for(int i=n-1;i>=0;i--){
            swap(nums[0],nums[i]);
            heapify(nums,i,0);
        }
    }
public:
    vector<int> sortArray(vector<int>& nums) {
        heapSort(nums);
        return nums;
    }
};



Solution 2 : 

//basically it is asking to quick sort
class Solution {
private:
    void merge(vector<int>&nums,int start,int mid,int end){
        int i = start,j=mid+1;
        vector<int> temp;
        while(i<=mid && j<=end){
            if(nums[i] < nums[j]){
                temp.push_back(nums[i]);
                i++;
            }
            else {
                temp.push_back(nums[j]);
                j++;
            }
        }

        while(i<=mid){
            temp.push_back(nums[i]);
            i++;
        }
        while(j<=end){
            temp.push_back(nums[j]);
            j++;
        }

        for(int i=start;i<=end;i++){
            nums[i] = temp[i-start];
        }
    }

    void mergeSort(vector<int>&nums,int start,int end){
        if(start < end){
            int mid = (start + end)/2;
            mergeSort(nums,start,mid);
            mergeSort(nums,mid+1,end);
            merge(nums,start,mid,end);
        }
    }
public:
    vector<int> sortArray(vector<int>& nums) {
        // mergeSort(nums,0,nums.size()-1);
        sort(nums.begin(),nums.end());
        return nums;
    }
};

Solution 3 : (TLE)

//basically it is asking to quick sort
class Solution {
private:
    int partition(vector<int>&nums,int start,int end){
        int pivot = nums[start];
        int i=start+1,j=end;
        do{
            while(i<=j && nums[i] <= pivot) i++;
            while(j>=i && nums[j] > pivot) j--;

            if(i<j) swap(nums[i],nums[j]);
        }while(i<j);

        swap(nums[start],nums[j]);
        return j;
    }

    void quickSort(vector<int>&nums,int start,int end){
        if(start < end){
            int partn = partition(nums,start,end);
            quickSort(nums,start,partn-1);
            quickSort(nums,partn+1,end);
        }
    }
public:
    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums,0,nums.size()-1);
        return nums;
    }
};
