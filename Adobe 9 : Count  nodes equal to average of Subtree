Question Link : https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/description/

Solution 1: 

class Solution {
private:
    vector<TreeNode*> nodes;
    int cnt = 0;

    void traversal(TreeNode* root){
        if(!root) return;

        traversal(root->left);
        nodes.push_back(root);
        traversal(root->right);
    }

    int subTreeSum(TreeNode* root){
        if(!root) return 0;
        cnt++;
        return root->val + subTreeSum(root->left) + subTreeSum(root->right);
    }

public:
    int averageOfSubtree(TreeNode* root) {
        int ans = 0;
        traversal(root);
     
        for(TreeNode* v : nodes){
            int sum = subTreeSum(v);
            if(v->val == sum/cnt) ans++;
            cnt = 0;
        }

        return ans;
    }
};


Solution 2 : (Best)

class Solution {
public:
    int ans = 0;
    pair<int,int> solve(TreeNode* root){
        if(root==NULL) return {0,0};
        
        auto left = solve(root->left);
        int l_sum = left.first; // sum of nodes present in left sub tree
        int l_cnt = left.second; // no. of nodes present in left sub tree
        
        auto right = solve(root->right);
        int r_sum = right.first; // sum of nodes present in right sub tree
        int r_cnt = right.second; // no. of nodes present in left sub tree
        
        int sum = root->val + l_sum + r_sum;
        int cnt = l_cnt + r_cnt + 1;
        
        if(root->val == sum/cnt) ans++;
        return {sum,cnt};
    }
    int averageOfSubtree(TreeNode* root) {
        solve(root);
        return ans;
    }
};

