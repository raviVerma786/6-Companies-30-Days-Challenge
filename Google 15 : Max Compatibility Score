Question Link :https://leetcode.com/problems/maximum-compatibility-score-sum/description/

Solution : 

class Solution {
private:
    int helper(vector<vector<int>>&score,vector<bool>&vis,int i){
        if(i==score.size()) return 0;

        int maxScore = 0;
        for(int j=0;j<score[i].size();j++){
            if(!vis[j]){
                vis[j] = true;
                maxScore = max(maxScore,score[i][j] + helper(score,vis,i+1));
                vis[j] = false;
            }
        }

        return maxScore;
    }

public:
    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
        int n = students.size(),m=mentors.size(),sz = students[0].size();
        vector<vector<int>> score(n,vector<int>(m,0));
        //score[i][j] => score if jth mentor assigned to ith student

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int cnt = 0;
                for(int k=0;k<sz;k++){
                    if(students[i][k] == mentors[j][k]) cnt++;
                }

                score[i][j] = cnt;
            }
        }
        
        //calculating max score by taking different combinations
        vector<bool> vis(m,false);
        return helper(score,vis,0);
    }
};
