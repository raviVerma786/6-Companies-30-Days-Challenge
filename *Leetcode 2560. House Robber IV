Question Link : https://leetcode.com/contest/weekly-contest-331/problems/house-robber-iv/

Solution : 

class Solution {
public:
    //https://www.youtube.com/watch?v=kSwWGcSfWx4&ab_channel=PretestPassed
    // when there is to find min of max , always use binary search
    
    int check(vector<int> &nums,int mid,int k){
        int n= nums.size();
        vector<int> dp(n,0);//dp[i] => number of houses till index i that can be robbed with value <= mid
        
        if(nums[0] <= mid) dp[0] = 1;
        if(n > 1){
            if(nums[1] <= mid) dp[1] = 1;
            else dp[1] = dp[0];
        }
        
        for(int i=2;i<n;i++){
            if(nums[i] <= mid) dp[i] = max(dp[i-1],1 + dp[i-2]);
            else dp[i] = dp[i-1];
        }
        
        return dp[n-1] >= k; // can we loot at least k houses or not
    }
    
    int minCapability(vector<int>& nums, int k) {
        int low = 1, high = *max_element(nums.begin(),nums.end());
        
        int ans = -1;
        while(low <= high){
            int mid = (low + high)/2;
            if(check(nums,mid,k)){
                ans = mid;
                high = mid - 1;
            }
            else low = mid + 1;
        }
        
        return ans;
    }
};
