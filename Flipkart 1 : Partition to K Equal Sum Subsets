Question Link : https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/

Solution :

class Solution {
public:
    bool f(vector<int>&nums,vector<bool>&visited,int i,int target,int curr_sum,int k)
    {
        //Base Case 
        if(k==1) return true;
        if(i>=nums.size()) return false; // It help to avoid TLE

        if(curr_sum==target)
            return f(nums,visited,0,target,0,k-1);

        for(int j=i;j<nums.size();j++)
        {
            if(!visited[j] && curr_sum + nums[j] <= target)
            {
                visited[j] = true;
                if(f(nums,visited,j+1,target,curr_sum + nums[j],k)) return true;
                visited[j] = false;
            }
        }

        return false;
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
         int sum = 0;
         for(int i=0;i<nums.size();i++){
             sum+=nums[i];
         }
         if(nums.size()<k || sum%k!=0) return false;

         int target = sum/k;
         for(int i : nums){
             if(i > target) return false;
         }
         
         sort(nums.rbegin(),nums.rend()); //this will reduce the complexity of backtracking
         vector<bool>visited(nums.size(),false);
         return f(nums,visited,0,target,0,k);
    }
};


Solution 2 : (Bitmask Dp => Best Solution )

//Bitmask dp (for backtracking solution see previous accepted submissions)
// https://www.geeksforgeeks.org/partition-of-a-set-into-k-subsets-with-equal-sum-using-bitmask-and-dp/
// https://www.youtube.com/watch?v=hkgjgb5PQ8o&ab_channel=AbhinavKumar
class Solution {
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
         if(k==1) return true;
         int sum = accumulate(nums.begin(),nums.end(),0);
         if(nums.size()<k || sum%k!=0) return false;

         int target = sum/k;
         for(int i : nums){
             if(i > target) return false;
         }
         
         //starting bitmask dp
         int n = nums.size();
         vector<int> dp(1<<n,-1);
         dp[0] = 0;

         for(int mask=0;mask<(1<<n);mask++){
             if(dp[mask] == -1) continue;

             for(int i=0;i<n;i++){
                 if(!(mask & (1<<i)) && dp[mask] + nums[i] <= target){
                     dp[(mask | (1<<i))] = (dp[mask] + nums[i]) % target;
                 }
             }
         }

         return dp[(1<<n) - 1] == 0;
    }
};
